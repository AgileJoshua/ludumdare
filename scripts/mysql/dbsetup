#!/usr/bin/env php
<?php
require_once __DIR__ . "/../../db.php";
require_once __DIR__ . "/../../core/node.php";

db_Connect();
echo "Connected: " . db_IsConnected() . "\n";

// NOTE: Indexes must be less than 767 bytes!
//   That means 255 (255.666~) for strings in UTF8 (UTF8mb3)
//   or 191 (191.75) for strings in UTF8mb4 (What I am using).
//   This *can* be bumped to 3072 with --innodb_large_prefix, but
//   the implications of this are not well understood (by me).

// https://dev.mysql.com/doc/refman/5.5/en/innodb-restrictions.html
// https://make.wordpress.org/core/2015/04/02/the-utf8mb4-upgrade/

// Consider using a simpler charset and coalation for slugs and slug-lookup tables (they only need ASCII 0-127)

// http://code.openark.org/blog/mysql/mysqls-character-sets-and-collations-demystified
		
	db_Query("DROP TABLE " . CMW_TABLE_NODE . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_NODE_META . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_NODE_DIFF . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_NODE_LOVE . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_NODE_STAR . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_USER . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_COMMENT . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_COMMENT_LOVE . ";",true);
		
	db_Query("SET storage_engine=InnoDB;");
//	db_Query("SET collation_server=utf8_unicode_ci;");
//	db_Query("SET character_set_server=utf8;");
	
	const DBTYPE_INNODB = " ENGINE=InnoDB";
	const DBTYPE_MYISAM = " ENGINE=MyISAM";
	const DBTYPE_ARCHIVE = " ENGINE=Archive";
	// NOTE: utf8 is 3 byte unicode. utf8mb4 is 4 byte. Required for Emoji.
	const CSTYPE_UTF8 = " CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci";
	const CSTYPE_LATIN = " CHARACTER SET latin1 COLLATE latin1_swedish_ci";		// Case Insensitive
	//const CSTYPE_LATIN = " CHARACTER SET latin1 COLLATE latin1_bin";			// Case Sensitive
	
	// https://dev.mysql.com/doc/refman/5.5/en/case-sensitivity.html
	
	
	$dbtype_default = DBTYPE_INNODB . CSTYPE_UTF8;

	// id - The Unique ID of the Node
	// parent - Who I'm a child of (if anyone)
	// root - Who owns me (Node)
	// author - Who wrote and published the Node (not necessarily who changed it).
	// type - What are we (What kind of Node)?
	// time - Timestamps
	// slug - Clean name for URLs
	// name - Proper name
	// body - body or description

	// comment_count - How many Comments
	// love_count - How much Love
	// favourite_count - How many Favourites
	// popularity - some metric used to single out posts ** (may want to sort by)

	// meta_cache - cached list of references (metas) in JSON format.
	db_Query(
		"CREATE TABLE " . CMW_TABLE_NODE . " (
			id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT 
				UNIQUE,
			parent BIGINT UNSIGNED NOT NULL DEFAULT 0,
				INDEX (parent),
			author BIGINT UNSIGNED NOT NULL DEFAULT 0,
				INDEX (author),

			type VARCHAR(16) CHARSET latin1 NOT NULL DEFAULT '',
				INDEX (type),
			subtype VARCHAR(16) CHARSET latin1 NOT NULL DEFAULT '',
			
			time_created DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
			time_modified DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
			time_published DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
				INDEX (time_published),

			slug VARCHAR(64) CHARSET latin1 NOT NULL DEFAULT '',
				INDEX parent_slug(parent,slug),
				INDEX author_slug(author,slug),
			name VARCHAR(191) NOT NULL DEFAULT '',
			body MEDIUMTEXT NOT NULL,

			
			comment_count INT NOT NULL DEFAULT 0,
			love_count INT NOT NULL DEFAULT 0,
			favourite_count INT NOT NULL DEFAULT 0,
			popularity INT NOT NULL DEFAULT 0,
			
			meta_cache TEXT NOT NULL,
			favourite_cache TEXT NOT NULL
		)" . $dbtype_default . ";");
	//			INDEX(root,parent,slug),
	
	// Reserve the first 32 nodes for special use //
	$n = node_Add("group","","root","/root","",0,0);									// 1 (CMW_NODE_ROOT)
	$n = node_Add("settings","","user","/user","User Settings",0,CMW_NODE_ROOT);		// 2 (CMW_NODE_USER)
	$n = node_Add("admin","","admin","/admin","Admin Settings",0,CMW_NODE_ROOT);		// 3 (CMW_NODE_ADMIN)
//	$n = node_Add("proxy","","team","/team","",0,CMW_NODE_ROOT);						// x (CMW_NODE_TEAM)
//	$n = node_Add("proxy","","game","/game","",0,CMW_NODE_ROOT);						// x (CMW_NODE_GAME)
//	$n = node_Add("proxy","","demo","/demo","",0,CMW_NODE_ROOT);						// x (CMW_NODE_DEMO)
//	$n = node_Add("proxy","","craft","/craft","",0,CMW_NODE_ROOT);						// x (CMW_NODE_CRAFT)
//	$n = node_Add("proxy","","post","/post","",0,CMW_NODE_ROOT);						// x (CMW_NODE_POST)
//	$n = node_Add("proxy","","media","/media","",0,CMW_NODE_ROOT);						// x (CMW_NODE_MEDIA)
	for ( $idx = $n; $idx < 15; $idx++ ) {
		node_Add("null","","reserved-".($idx+1),"??","",0,0);
	}
	$n = node_Add("group","","event","Ludum Dare Events","",0,CMW_NODE_ROOT);			// 16 (CMW_NODE_EVENT)
	$n = node_Add("group","","platform","Platforms","",0,CMW_NODE_ROOT);				// 17 (CMW_NODE_PLATFORM)
	$n = node_Add("group","","tool","Tools","",0,CMW_NODE_ROOT);						// 18 (CMW_NODE_TOOL)
	$n = node_Add("group","","other","Other Games and Events","",0,CMW_NODE_ROOT);		// 19 (CMW_NODE_OTHER)
	$n = node_Add("group","","custom","Custom Events","",0,CMW_NODE_ROOT);				// 20 (CMW_NODE_CUSTOM)
	$n = node_Add("group","","extra","/extra","",0,CMW_NODE_ROOT);						// 21 (CMW_NODE_HOSTED)
	for ( $idx = $n; $idx < 31; $idx++ ) {
		node_Add("null","","reserved-".($idx+1),"??","",0,0);
	}

	$n = node_Add("group","","ld","Ludum Dare","",0,CMW_NODE_EVENT);					// 32 (CMW_NODE_EVENT_LD)
	$n = node_Add("group","","minild","MiniLD","",0,CMW_NODE_EVENT);					// 33 (CMW_NODE_EVENT_MINILD)
	$n = node_Add("group","","october","October Challenge","",0,CMW_NODE_EVENT);		// 34 (CMW_NODE_EVENT_OCTOBER)
	$n = node_Add("group","","scene","It's a secret to everyone","",0,CMW_NODE_EVENT);	// 35 (CMW_NODE_EVENT_SCENE)

	$n = node_Add("group","","game","Other Games","",0,CMW_NODE_OTHER);					// 36 (CMW_NODE_OTHER_GAME)
	$n = node_Add("group","","demo","Other Demos","",0,CMW_NODE_OTHER);					// 37 (CMW_NODE_OTHER_DEMO)
	$n = node_Add("group","","craft","Other Crafts","",0,CMW_NODE_OTHER);				// 38 (CMW_NODE_OTHER_CRAFT)
	$n = node_Add("group","","jam","Other Jam Games","",0,CMW_NODE_OTHER);				// 39 (CMW_NODE_OTHER_JAM)
	$n = node_Add("group","","scene","Other Demoscene Events","",0,CMW_NODE_OTHER);		// 40 (CMW_NODE_OTHER_SCENE)

	$n = node_Add("event","","dev","Development Tools","",0,CMW_NODE_TOOL);				// 41 (CMW_NODE_TOOL_DEV)
	$n = node_Add("event","","art","Art Tools","",0,CMW_NODE_TOOL);						// 42 (CMW_NODE_TOOL_ART)
	$n = node_Add("event","","content","Content Creation Tools","",0,CMW_NODE_TOOL);	// 43 (CMW_NODE_TOOL_CONTENT)
	$n = node_Add("event","","other","Other Tools","",0,CMW_NODE_TOOL);					// 44 (CMW_NODE_TOOL_OTHER)
	for ( $idx = $n; $idx < 63; $idx++ ) {
		node_Add("null","","reserved-".($idx+1),"??","",0,0);
	}

	// Calculate now //
	$latest_year = 2015;
	$latest_month = 7;

	$months = [
		"January",
		"February",
		"March",
		"April",
		"May",
		"June",
		"July",
		"August",
		"September",
		"October",
		"November",
		"December",
		"Smarch"
	];	
	// Add Historic Ludum Dare Events
	{
		// Ludum Dare Events //
		node_Add("event","","00","Ludum Dare 0 (24 Hour Event)","",0,CMW_NODE_EVENT_LD);
		$latest_event = 33;		// Main Event //
		for ( $idx = 1; $idx <= $latest_event; $idx++ ) {
			node_Add("event","", (($idx < 10)?"0":"").$idx,"Ludum Dare ".$idx,"",0,CMW_NODE_EVENT_LD);
		}
		// Reserve up to Ludum Dare 48
		for ( $idx = $latest_event+1; $idx <= 48; $idx++ ) {
			node_Add("null","","".$idx,"Ludum Dare ".$idx,"(placeholder)",0,0);
		}

		// Relaxed Events (pre MiniLD) //
		node_Add("event","","ld08-5","Ludum Dare 8.5 (24 Hour Relaxed Event)","",0,CMW_NODE_EVENT_MINILD);
		node_Add("event","","ld10-5","Ludum Dare 10.5 (Relaxed Event)","",0,CMW_NODE_EVENT_MINILD);
		
		// MiniLD Events //
		$latest_event = 64;
		for ( $idx = 1; $idx <= $latest_event; $idx++ ) {
			node_Add("event","",(($idx < 10)?"0":"").$idx,"MiniLD #".$idx,"",0,CMW_NODE_EVENT_MINILD);
		}
		
		// October Challenge Events //
		for ( $idx = 2010; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"October Challenge ".$idx,"",0,CMW_NODE_EVENT_OCTOBER);
		}

		// LD Scene Events //
		for ( $idx = 2015; $idx <= $latest_year; $idx++ ) {
			//node_Add("event","",$idx,"LD Scene ".$idx,"",0,CMW_NODE_EVENT_SCENE);
		}
	}
	
	// Add Historic Proxies //
	{
		node_Add("event","","1980s","Game from 1980-1989","",0,CMW_NODE_OTHER_GAME);
		for ( $idx = 1990; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"Game from ".$idx,"",0,CMW_NODE_OTHER_GAME);
		}
		node_Add("event","","unreleased","Unreleased Game","",0,CMW_NODE_OTHER_GAME);
		
		node_Add("event","","1980s","Demo/Intro/Cracktro from 1980-1989","",0,CMW_NODE_OTHER_DEMO);
		for ( $idx = 1990; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"Demo/Intro/Cracktro from ".$idx,"",0,CMW_NODE_OTHER_DEMO);
		}
		node_Add("event","","unreleased","Unreleased Demo/Intro/Cracktro","",0,CMW_NODE_OTHER_DEMO);

		node_Add("event","","1980s","Craft from 1980-1989","",0,CMW_NODE_OTHER_CRAFT);
		node_Add("event","","1990s","Craft from 1990-1999","",0,CMW_NODE_OTHER_CRAFT);
		for ( $idx = 2000; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"Craft from ".$idx,"",0,CMW_NODE_OTHER_CRAFT);
		}		
		node_Add("event","","unreleased","Unreleased Craft","",0,CMW_NODE_OTHER_CRAFT);
	}
	
	// Add Other Game Jams //
	{
		$n = node_Add("event","","1gam","One Game a Month","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2013; $idx <= $latest_year; $idx++ ) {
			$n2 = node_Add("event","",$idx,"One Game a Month ".$idx,"",0,$n);
			//for ( $idx2 = 1; $idx2 <= (($idx===$latest_year) ? $latest_month : 12); $idx2++ ) {
			for ( $idx2 = 1; $idx2 <= 12; $idx2++ ) {
				node_Add("event","",($idx2<10?"0":"").$idx2,"One Game a Month - ".$months[$idx2-1]." ".$idx,"",0,$n2);
			}
		}

		$n = node_Add("event","","itch-io","itch.io Hosted Jam","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2014; $idx <= $latest_year; $idx++ ) {
			$n2 = node_Add("event","",$idx,"itch.io Hosted Jam ".$idx,"",0,$n);
//			for ( $idx2 = ($idx===2014?2:1); $idx2 <= 12; $idx2++ ) {
//				node_Add("event","",($idx2<10?"0":"").$idx2,"itch.io - ".$months[$idx2-1]." ".$idx,"",0,$n2);
//			}
		}
		
		node_Add("event","","7dfps","7 Day FPS","",0,CMW_NODE_OTHER_JAM);
		node_Add("event","","7drl","7 Day Roguelike","",0,CMW_NODE_OTHER_JAM);

		$n = node_Add("event","","tojam","TOJam","Toronto Game Jam",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2006; $idx <= $latest_year; $idx++ ) {
			node_Add("event","","" . $idx,"TOJam ".$idx,"",0,$n);
		}
		$n = node_Add("event","","nordic-game-jam","Nordic Game Jam","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2006; $idx <= $latest_year; $idx++ ) {
			node_Add("event","","" . $idx,"Nordic Game Jam ".$idx,"",0,$n);
		}
		$n = node_Add("event","","no-more-sweden","No More Sweden","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2008; $idx <= $latest_year; $idx++ ) {
			node_Add("event","","" . $idx,"No More Sweden ".$idx,"",0,$n);
		}

		$n = node_Add("event","","global-game-jam","Global Game Jam","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2009; $idx <= $latest_year; $idx++ ) {
			node_Add("event","","" . $idx,"Global Game Jam ".$idx,"",0,$n);
		}

		// Historic //
		node_Add("event","","speedhack","Allegro Speedhack","",0,CMW_NODE_OTHER_JAM);
		node_Add("event","","indie-game-jam","Indie Game Jam","",0,CMW_NODE_OTHER_JAM);
		
		// Other Game Jam by Year //
		node_Add("event","","1980s","Other Game Jam from 1980-1989","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 1990; $idx <= $latest_year; $idx++ ) {
			node_Add("event","","" . $idx,"Other Game Jam in ".$idx,"",0,CMW_NODE_OTHER_JAM);
		}
	}

	// Add Other Demoscene //
	{
		$n = node_Add("event","","assembly","Assembly","",0,CMW_NODE_OTHER_SCENE);
		for ( $idx = 1992; $idx <= $latest_year; $idx++ ) {
			node_Add("event","","" . $idx,"Assembly ".$idx,"",0,$n);
		}
		$n = node_Add("event","","revision","Revision","",0,CMW_NODE_OTHER_SCENE);
		for ( $idx = 2011; $idx <= $latest_year; $idx++ ) {
			node_Add("event","","" . $idx,"Revision ".$idx,"",0,$n);
		}

		// Historic //
		$n = node_Add("event","","breakpoint","Breakpoint","",0,CMW_NODE_OTHER_SCENE);
		for ( $idx = 2003; $idx <= 2010; $idx++ ) {
			node_Add("event","","" . $idx,"Breakpoint ".$idx,"",0,$n);
		}
		$n = node_Add("event","","mekka-symposium","mekka & symposium","",0,CMW_NODE_OTHER_SCENE);
		for ( $idx = 1995; $idx <= 2002; $idx++ ) {
			node_Add("event","","" . $idx,"mekka & symposium ".$idx,"",0,$n);
		}
		$n = node_Add("event","","the-party","The Party","",0,CMW_NODE_OTHER_SCENE);
		for ( $idx = 1991; $idx <= 2002; $idx++ ) {
			node_Add("event","","" . $idx,"The Party ".$idx,"",0,$n);
		}
		$n = node_Add("event","","the-gathering","The Gathering","",0,CMW_NODE_OTHER_SCENE);
		for ( $idx = 1992; $idx <= 2001; $idx++ ) {
			node_Add("event","","" . $idx,"The Gathering ".$idx,"",0,$n);
		}

		// Other Demoscene Events by Year //
		node_Add("event","","1980s","Other Demoscene Event from 1980-1989","",0,CMW_NODE_OTHER_SCENE);
		for ( $idx = 1990; $idx <= $latest_year; $idx++ ) {
			node_Add("event","","" . $idx,"Other Demoscene Event in ".$idx,"",0,CMW_NODE_OTHER_SCENE);
		}
	}

	// Add Platforms //
	{
		$n = node_Add("platform","","windows","Windows","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","winrt","WinRT (Windows 8+)","",$n,CMW_NODE_PLATFORM);

		$n = node_Add("platform","","linux","Linux","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","debian","Debian","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","ubuntu","Ubuntu","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","mint","Linux Mint","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","steamos","SteamOS","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","fedora","Fedora","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","centos","CentOS","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","opensuse","openSUSE","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","arch","Arch Linux","",$n,CMW_NODE_PLATFORM);

		node_Add("platform","","android","Google Android","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","webos","WebOS","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","chrome-os","Google Chrome OS","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","firefox-os","Mozilla Firefox OS","",$n,CMW_NODE_PLATFORM);

		node_Add("platform","","symbian","Symbian","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","brew","Brew","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","j2me","J2ME","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","mophun","Mophun","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","palm-os","Palm OS","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","windows-ce","Windows CE","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","bada","Samsung Bada","",0,CMW_NODE_PLATFORM);

		$n = node_Add("platform","","web","Web Browser","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","html5","HTML5","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","chrome","Google Chrome","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","firefox","Mozilla Firefox","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","internet-explorer","Microsoft Internet Explorer","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","opera","Opera","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","safari","Apple Safari","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","webkit","Webkit","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","netscape","Mozilla Netscape","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","mosaic","NCSA Mosaic","",$n,CMW_NODE_PLATFORM);

		$n = node_Add("platform","","unix","Unix","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","freebsd","FreeBSD","",$n,CMW_NODE_PLATFORM);

		node_Add("platform","","osx","Mac OS X","",0,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","ios","Apple iOS","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","iphone","Apple iPhone","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","ipad","Apple iPad","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","ipod","Apple iPod","",$n,CMW_NODE_PLATFORM);

		node_Add("platform","","kindle","Amazon Kindle (eReader)","",$n,CMW_NODE_PLATFORM);

		node_Add("platform","","nes","Nintendo Entertainment System","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","snes","Super Nintendo Entertainment System","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","n64","Nintendo 64","",0,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","gamecube","Nintendo GameCube","",0,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","wii","Nintendo Wii","",$n,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","wii-u","Nintendo Wii U","",$n,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","gameboy","Nintendo GameBoy","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","super-gameboy","Nintendo Super GameBoy","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","gameboy-color","Nintendo GameBoy Color","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","gameboy-advance","Nintendo GameBoy Advance","",0,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","nds","Nintendo DS","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","ndsi","Nintendo DSi","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","3ds","Nintendo 3DS","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","virtual-boy","Nintendo Virtual Boy","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","nx","Nintendo NX","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","ps1","Sony PlayStation","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","ps2","Sony PlayStation 2","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","ps3","Sony PlayStation 3","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","ps4","Sony PlayStation 4","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","psp","Sony PlayStation Portable","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","ps-vita","Sony PlayStation Vita/PlayStation TV","",0,CMW_NODE_PLATFORM);

		$n = node_Add("platform","","sms","Sega Master System","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","game-gear","Sega Game Gear","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","genesis","Sega Genesis/Mega Drive/32x","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","saturn","Sega Saturn","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","dreamcast","Sega Dreamcast","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","pc-engine","NEC PC Engine/Turbo Grafx 16","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","neogeo","SNK NeoGeo","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","neogeo-pocket","SNK NeoGeo Pocket/Color","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","wonderswan","Bandia Wonderswan/Color/Crystal","",0,CMW_NODE_PLATFORM);
		
		node_Add("platform","","pet","Commodore PET","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","vic20","Commodore Vic20","",0,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","c64","Commodore 64","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","c128","Commodore 128","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","amiga","Commodore Amiga","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","zx-spectrum","ZX Spectrum","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","2600","Atari 2600","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","5200","Atari 5200","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","7800","Atari 7800","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","jaguar","Atari Jaguar","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","lynx","Atari Lynx","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","atari-st","Atari ST","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","msx","MSX","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","xbox","Microsoft Xbox","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","xbox-360","Microsoft Xbox 360","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","xbox-one","Microsoft Xbox One","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","fm-towns","FM Towns","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","cd-i","Philips CD-i","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","arcade","Arcade","",0,CMW_NODE_PLATFORM);
		
		node_Add("platform","","arduino","Arduino","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","custom","Custom","",0,CMW_NODE_PLATFORM);
	}
	
	// Posts (everything) -- Get, is PUBLISHED=true, sort by PUBLISHED, LIMIT 10
	// Posts (popular) -- Get, is PUBLISHED=true, is LOVE >= 6 sort by PUBLISHED, LIMIT 10
	// Posts (favourites) -- Get Favourites (INT), is PUBLISHED=true, is AUTHOR=(IN Favourites), sort by PUBLISHED, LIMIT 10
	// Posts (league) -- Get, is PUBLISHED=true, is LEAGUE=value, sort PUBLISHED, LIMIT 10
	// Posts (hybrid) -- Combine the logic. Standard feed is Popular, Favourites and League
	// Comments -- For ItemID, get: PARENT=ItemID, TYPE="comment", is PUBLISHED=true, sort by PUBLISHED
	// Games -- Get EventID, is PUBLISHED=true, PARENT=EventID, etc...
	   // Combined Score
	   // By Coolness
	   // By Least Votes
	   // By SMARTS. No need to pull all 3000 games per request.
	// Download -- Parent=Game, Info=Platform, Body=URL, Name=Title (if not Parent name)
	
/*
	Post
		- 
	Game
		- Compo **
		- Jam **
		- Craft
		  - Board/Card
		  - Comic
		  - Music
		- Warmup
		- MiniLD
		- Wallpaper
		- Content
		- Tool
		- Post Compo
		- 
	Event (Group)
	Group
	User
	
	-------------------------
	
	root (Group)
		/user
		/event (Add code that lists all children)
		/tool
*/
	
	
	db_Query(
		"CREATE TABLE " . CMW_TABLE_NODE_META . " (
			/* For Indexing Only, generally unused */
			_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT 
				UNIQUE,

			id_a BIGINT UNSIGNED NOT NULL DEFAULT 0,
				INDEX(id_a),
			id_b BIGINT UNSIGNED NOT NULL DEFAULT 0,
				INDEX(id_b),

			type VARCHAR(16) CHARSET latin1 NOT NULL DEFAULT '',
				INDEX (type),
			subtype VARCHAR(16) CHARSET latin1 NOT NULL DEFAULT '',
			
			/*UNIQUE id_ab_type_subtype(id_a,id_b,type,subtype),*/
				
			data TEXT NOT NULL
		)" . $dbtype_default . ";");

/*
Thing {
	'author':{
		'creator':{
			'id':4098571,
			'text':""
		},
		'team':[
			{
				'id':385131,
				'text':""
			},
			{
				'id':4912,
				'text':""
			}
		],
		'stub':[
			{
				'text':"jummy"
			},
			{
				'text':"bibo"
			}
		]
	}	
};


Thing {
	'author':{
		'creator':4098571,
		'team':[
			385131,
			4912
		],
		'stub':[
			"jummy",
			"bibo"
		]
	}	
};


*/
	// USER
	// id 0 "avatar,image" "image.png"
	// id 0 "twitter,name" "mikekasprzak"
	// id 0 "twitch,name" "povrazor"
	// id 0 "twitch,id" "1920470160614"
	// id 0 "real,name" "Mike Kasprzak"
	// id 0 "jammer,real-name" "1"
	// id 0 "jammer,header" "1"
	// id 0 "jammer,dark-color" "842"
	// id 0 "jammer,light-color" "BD8"

	// team_id id "member," "admin"
	// team_id id "member," "contributor"
	// (foreach team with my id)
/*
	User {
		'avatar':{
			'image':'image.png'
		},
		'twitter':{
			'name':'mikekasprzak'
		},
		'twitch':{
			'name:'povrazor',
			'id':"1920470160614"
		},
		'real':{
			'name':"Mike Kasprzak"
		},
		'jammer':{
			real-name
			header
			dark-color
			light-color
		},
		'member':{ // No Subtype
			'192746':"contributor',
			'4424':"admin"
		}
	}
	
	Team {
		'member':{	// No Subtype
			'84":"admin",
			'8214":"contributor",
			'12740":"contributor",
			'13221":"contributor"
		}
	}
*/
	
	// id author_id "author,creator" ""              **STORE ID_B**
	
	// Need to be able to describe:
	// var->key->key = value
	// var->key[index] = value		(insert)
	// var->key[] = value			(push)
	
	// USER
	// id 0 0 "social,twitter,name" "mikekasprzak"			json[social][twitter][name]
	// id 0 0 "social,facebook,name" "chubby wubby"
	// id 0 0 "social,twitch,name" "povrazor"
	// id 0 0 "social,twitch,id" "1920470160614"
	// id 0 0 "avatar,," "image.png"	

	// Alternative format (dashes create namespaces)
	// id 0 0 "social-twitter,name" "mikekasprzak"			json['social']['twitter']['name']
	// id 0 0 "social-facebook,name" "chubby wubby"
	// id 0 0 "social-twitch,name" "povrazor"
	// id 0 0 "social-twitch,id" "1920470160614"
	
	// GAME
	   // Who worked on it? Who can edit it?
	// id author_id 0 "author,admin,[]" !author_id!           (can edit entry)
	// id author_id 0 "author,[admin]," !author_id!           
	// id author_id 0 "author,[admin],7" !author_id!           
	// id author_id 0 "author,contributor,[]" !author_id!     (only gets credit for it)
	// id 0 0         "author,stub,[]" "username"             (stub user, without an account)
	   // Authors are okay because they are global.

	   // Screenshots, Videos, Downloads //
	// id event_id 0  "media,shot,url" "http://blah.com/boo.png"
	// id event_id 0  "media,video,url" "http://youtube.com/blah"
	   // How do I find all Linux Games? HTML5 Games? Unity Player Games? Flash Games?
	   // How do I find all Unity Games?
	// id event_id tool_id "tool,," ""
	
	   // Embed Info //
	// id 0 640 "embed,width" "640"
	// id 0 480 "embed,height" "480"
	// id 0 0 "embed,url" "zeebra.com/mygame"
	// id 0 300 "embed,tw_width" "300"     (twitter embed width and height)
	// id 0 200 "embed,tw_hegiht" "200"

	   // How many Teams? How many Solo Devs?
	// an SQL query that does a count.
	   // All games made by teams?



	db_Query(
		"CREATE TABLE " . CMW_TABLE_COMMENT . " (
			id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
			parent BIGINT UNSIGNED NOT NULL DEFAULT 0,
			node BIGINT UNSIGNED NOT NULL DEFAULT 0,
				INDEX (node),
				
			author BIGINT UNSIGNED NOT NULL DEFAULT 0,
				/*INDEX (author),*/
			
			time_created DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
			time_modified DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
			time_published DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
				INDEX (time_published),

			body TEXT NOT NULL,

			/*comment_count INT NOT NULL DEFAULT 0,*/
			love_count INT NOT NULL DEFAULT 0 /*,*/
			/*favourite_count INT NOT NULL DEFAULT 0,*/
			/*popularity INT NOT NULL DEFAULT 0,*/
			
			/*meta_cache TEXT NOT NULL,*/
			/*favourite_cache TEXT NOT NULL*/
		)" . $dbtype_default . ";");

	
	// Private Data (Email, Password Hash). Never send these. //
	db_Query(
		"CREATE TABLE " . CMW_TABLE_USER . " (
			node BIGINT UNSIGNED NOT NULL UNIQUE,
				INDEX(node),

			mail VARCHAR(191) NOT NULL UNIQUE,
				INDEX(mail),
				
			hash VARCHAR(128) NOT NULL
		)" . $dbtype_default . ";");

//			slug VARCHAR(64) CHARSET latin1 NOT NULL UNIQUE,
//				INDEX(slug),
	// NOTE: Slug must exactly match the slug of the Node with the same Id 

	// As of PHP 5.5, password_hash uses bcrypt which needs 60 chars.
	// Various articles recommend making it 255 chars, but as of 2015 we don't need it yet.
	// My compromise is to set it to 128 chars, though we don't need more than 64.
	// When PHP switches to a fancier algorithm, then we'll do an alter-table to add more space.

	
	{
		// Add Dummy User //
		$user_id = node_Add(
			'user',"",'pov','PoV','I am the PoV. :smile:',
			0,CMW_NODE_USER,
			true
		);	
		node_AddUser($user_id,'mike@sykhronics.com','blahblah');
	
		// Add Dummy Games //
		node_Add(
			'game',"",'bearly-seasoned','Bearly:bear:Seasoned',"It's about a :bear:. The :bear: wants :fish:. Eat :fish: then go :house:.",
			$user_id,CMW_NODE_OTHER_GAME,
			true
		);
		node_Add(
			'game',"",'phat-js','Phat JS',"It's just phat",
			$user_id,CMW_NODE_OTHER_DEMO,
			true
		);
		
		// Add Dummy Metadata //
		node_AddMeta($user_id,0,"twitter","","mikekasprzak");
		node_AddMeta($user_id,0,"twitch","name","povrazor");
		node_AddMeta($user_id,0,"twitch","id","1920470160614");
		node_AddMeta($user_id,0,"real","name","Mike Kasprzak");
		node_AddMeta($user_id,0,"jammer","real-name","1");
		node_AddMeta($user_id,0,"jammer","dark-color","428");
		node_AddMeta($user_id,0,"jammer","light-color","A9F");
		node_AddMeta($user_id,0,"jammer","header","1");
		node_AddMeta(4,$user_id,"member","","admin");
	}
	
	// Love Table. If a user has given a +1 to something. //
	db_Query(
		"CREATE TABLE " . CMW_TABLE_NODE_LOVE . " (
			node BIGINT UNSIGNED NOT NULL,
				INDEX(node),
			user BIGINT UNSIGNED NOT NULL,
				INDEX node_user(node,user),
			ip INT UNSIGNED NOT NULL,
				UNIQUE node_user_ip(node,user,ip)
		)" . $dbtype_default . ";");
	// for IP queries, use INET_ATON() and INET_NTOA().
	// http://dev.mysql.com/doc/refman/5.0/en/miscellaneous-functions.html#function_inet-aton
	// ipv6 forget about it for now //

	// Comment Love Table. If a user has given a +1 to something. //
	db_Query(
		"CREATE TABLE " . CMW_TABLE_COMMENT_LOVE . " (
			comment BIGINT UNSIGNED NOT NULL,
				INDEX(comment),
			user BIGINT UNSIGNED NOT NULL,
				INDEX comment_user(comment,user),
			ip INT UNSIGNED NOT NULL,
				UNIQUE comment_user_ip(comment,user,ip)
		)" . $dbtype_default . ";");

	// Star Table. If a user has favourited something (so they can view it later). //
	db_Query(
		"CREATE TABLE " . CMW_TABLE_NODE_STAR . " (
			node BIGINT UNSIGNED NOT NULL,
				INDEX(node),
			user BIGINT UNSIGNED NOT NULL,
				INDEX(user),
			UNIQUE node_user(node,user)
		)" . $dbtype_default . ";");
	// No need for an IP. Users only. //


//	$query = 
//		"CREATE TABLE " . $log_table . " (
//			node BIGINT UNSIGNED NOT NULL,
//			user BIGINT UNSIGNED NOT NULL,
//			ip INT UNSIGNED NOT NULL
//		) ENGINE=archive;";

	// Database Engines //
	// InnoDB (DairyBox Default) - 
	// MyISAM (Server Default) - 
	// Archive - 
	
	echo "Done\n";
?>