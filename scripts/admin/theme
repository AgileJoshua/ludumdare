#!/usr/bin/env php
<?php

if ( PHP_SAPI !== "cli" ) {
	header("HTTP/1.1 500 Internal Server Error");
	die;
}

if ( count($argv) < 2 ) {
	echo "Usage: ".$argv[0]." [command]\n";
	echo "\n";
	echo "  dupes - Remove Duplicate Ideas\n";
	echo "  score - Score Ideas\n";
	die;
}

require_once __DIR__."/../../db.php";
require_once __DIR__."/../../core/theme.php";
require_once __DIR__."/../../core/internal/sanitize.php";

$EVENT_NAME = "Ludum Dare 34";
$EVENT_MODE = 1;
$EVENT_NODE = 100;
$EVENT_DATE = new DateTime("2015-12-12T02:00:00Z");


if ( $argv[1] === "dupes" ) {
	print "\n*** WARNING ***\n\n";
	print "You are about to flag all duplicate ideas. This will destroy any manual changes.\n";
	print "\nAre you sure [type 'YES']? ";
	flush();
	$input = trim(fgets(STDIN));
	if ( $input != "YES" ) {
		print "Aborting...\n";
		exit(1);
	}
	
	echo "Fetching Theme List...\n";
	
	$all_themes = theme_GetIdeas($EVENT_NODE);
	
	echo count($all_themes) . " total.\n";
	
	// Generate Slugs //
	foreach ($all_themes as &$theme) {
		$theme['slug'] = sanitize_Slug($theme['theme']);
	}
	
	$new_themes = [];
	foreach ($all_themes as $key => &$theme) {
		if ( isset($new_themes[$theme['slug']]) ) {
			$theme['parent'] = $new_themes[$theme['slug']];
		}
		else {
			$theme['parent'] = 0;							// Clear Parent //
			$new_themes[$theme['slug']] = $theme['id'];		// Store ID by slug //
		}
	}
	
	echo count($new_themes) . " with duplicates removed.\n";
	
	echo "Updating Parents...\n";
	foreach ($all_themes as &$theme) {
		theme_SetParent($theme['id'],$theme['parent']);
	}
	echo "Done.\n";
	
	//$idx = 0;
	//foreach ($new_themes as $key => $theme) {
	//	$idx++;
	//	if ( $idx > 10 )
	//		break;
	//	print($key." [".$theme."]\n");
	//}
	//
	//var_dump($all_themes[0]);
	
	
	// TODO: Set an event-node specific flag once the auto-associate process has completed
	// (i.e. remember the process has been done)
}
else if ( $argv[1] === "score" ) {
	print "\n*** WARNING ***\n\n";
	print "You are about to calculate idea scores.\n";
	print "\nAre you sure [type 'YES']? ";
	flush();
	$input = trim(fgets(STDIN));
	if ( $input != "YES" ) {
		print "Aborting...\n";
		exit(1);
	}

	echo "Fetching Theme List...\n";
	
	$theme_list = theme_GetOriginalIdeas($EVENT_NODE);
	
	echo count($theme_list)." total\n";
	
	echo "Scoring...\n";
	
	// Stats //
	$min_votes = -1;
	$max_votes = -1;
	
	$min_score = -1;
	$max_score = -1;
	
	$mins = [ -1 => -1, 0 => -1, 1 => -1 ];
	$maxes = [ -1 => -1, 0 => -1, 1 => -1 ];
	
	$hack = 10;
	foreach ( $theme_list as $key => $value ) {
		$votes = theme_GetVotesForIdea($key);
		
		$votes_count = count($votes);
		if ( $min_votes < 0 || $votes_count < $min_votes )
			$min_votes = $votes_count;
		if ( $votes_count > $max_votes )
			$max_votes = $votes_count;
		
		$score = 0;
		$scores = [ -1 => 0, 0 => 0, 1 => 0 ];
		
		for ($idx = 0; $idx < $votes_count; $idx++ ) {
			$score += $votes[$idx]*2;
			$scores[$votes[$idx]]++;
		}

		if ( $min_score < 0 || $score < $min_score )
			$min_score = $score;
		if ( $votes_count > $max_score )
			$max_score = $score;

		foreach ( [1,0,-1] as $idx ) {
			if ( $mins[$idx] < 0 || $scores[$idx] < $mins[$idx] )
				$mins[$idx] = $scores[$idx];
			if ( $scores[$idx] > $maxes[$idx] )
				$maxes[$idx] = $scores[$idx];
		}
		
		theme_SetScore($key,$score/2);
		
//		echo $key.": ".$value." (Total: ".$votes_count."): ".$score." [".$scores[1]." ".$scores[0]." ".$scores[-1]."]\n";
//		
//		if ( $hack-- == 0)
//			break;
	}
	
	echo "Votes: ".$min_votes." ... ".$max_votes."\n";
	echo "Scores: ".$min_score." ... ".$max_score."\n";
	foreach ( [1,0,-1] as $idx ) {
		echo "[".$idx."]: ".$mins[$idx]." ... ".$maxes[$idx]."\n";
	}
}
else {
	echo "Error: Unknown command \"".$argv[1]."\"\n";
	exit(1);
}
